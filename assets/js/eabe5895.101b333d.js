"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4791],{9460:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var l=t(1085),s=t(1184);const o={},r="no-let-any",i={id:"eslint-plugin-complete/rules/no-let-any",title:"no-let-any",description:"Disallows declaring variables with let that do not have a type.",source:"@site/docs/eslint-plugin-complete/rules/no-let-any.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/no-let-any",permalink:"/eslint-plugin-complete/rules/no-let-any",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"no-for-in",permalink:"/eslint-plugin-complete/rules/no-for-in"},next:{title:"no-mutable-return",permalink:"/eslint-plugin-complete/rules/no-mutable-return"}},c={},a=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"no-let-any",children:(0,l.jsx)(n.code,{children:"no-let-any"})})}),"\n",(0,l.jsx)(n.p,{children:"Disallows declaring variables with let that do not have a type."}),"\n",(0,l.jsxs)(n.p,{children:["This is useful because the ",(0,l.jsx)(n.code,{children:"noImplicitAny"})," TypeScript compiler flag does not always catch this pattern. If you want to purge all of the ",(0,l.jsx)(n.code,{children:"any"})," from your codebase, you need this rule."]}),"\n",(0,l.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"// Bad\nlet foo;\n\n// Good\nlet foo: string;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/no-let-any": "error"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"This rule is not configurable."}),"\n",(0,l.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/no-let-any.ts",children:"Rule source"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/no-let-any.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var l=t(4041);const s={},o=l.createContext(s);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);