"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7679],{8759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var s=t(1085),o=t(1184);const i={},c="complete-tsconfig",l={id:"complete-tsconfig",title:"complete-tsconfig",description:"npm version",source:"@site/docs/complete-tsconfig.md",sourceDirName:".",slug:"/complete-tsconfig",permalink:"/complete-tsconfig",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"types/DependencyType",permalink:"/complete-node/types/DependencyType"},next:{title:"eslint-config-complete",permalink:"/eslint-config-complete"}},r={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Configs Offered",id:"configs-offered",level:2},{value:"Install",id:"install",level:2},{value:"Using <code>complete-lint</code>",id:"using-complete-lint",level:3},{value:"Manually",id:"manually",level:3},{value:"Usage",id:"usage",level:2},{value:"Strict Schema",id:"strict-schema",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"complete-tsconfig",children:(0,s.jsx)(n.code,{children:"complete-tsconfig"})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/complete-tsconfig",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/v/complete-tsconfig.svg",alt:"npm version"})})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["These are shared TypeScript configuration files that are intended to be used in ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"TypeScript"})," projects. They are based on the ",(0,s.jsx)(n.a,{href:"https://github.com/tsconfig/bases/blob/main/bases/strictest.json",children:(0,s.jsx)(n.code,{children:"@tsconfig/strictest"})})," configs for maximum safety."]}),"\n",(0,s.jsx)(n.h2,{id:"configs-offered",children:"Configs Offered"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.base.json",children:"tsconfig.base.json"})," - A config meant to be used by all TypeScript projects."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.browser.json",children:"tsconfig.browser.json"})," - A config meant for projects running in the browser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.node.json",children:"tsconfig.node.json"})," - A config meant for projects running in Node.js."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(n.h3,{id:"using-complete-lint",children:["Using ",(0,s.jsx)(n.code,{children:"complete-lint"})]}),"\n",(0,s.jsxs)(n.p,{children:["This package is part of the ",(0,s.jsx)(n.a,{href:"/complete-lint",children:(0,s.jsx)(n.code,{children:"complete-lint"})})," meta-linting package. If you also need to install ESLint-related dependencies, then it is recommended that instead of consuming ",(0,s.jsx)(n.code,{children:"complete-tsconfig"})," directly, you instead list ",(0,s.jsx)(n.code,{children:"complete-lint"})," as a dependency, as that will install the configs and other goodies. (However, ",(0,s.jsx)(n.code,{children:"complete-lint"})," will not work with the ",(0,s.jsx)(n.a,{href:"https://pnpm.io/",children:"pnpm"})," package manager, since pnpm does not handle transitive dependencies properly.)"]}),"\n",(0,s.jsxs)(n.p,{children:["For installation instructions, see ",(0,s.jsxs)(n.a,{href:"/complete-lint",children:["the ",(0,s.jsx)(n.code,{children:"complete-lint"})," page"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"manually",children:"Manually"}),"\n",(0,s.jsxs)(n.p,{children:["If you do not want to use the ",(0,s.jsx)(n.code,{children:"complete-lint"})," meta-package, then you can install this package manually:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"npm install complete-tsconfig --save\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that if you use these configs with ",(0,s.jsx)(n.code,{children:"pnpm"}),", you must also install ",(0,s.jsx)(n.code,{children:"@tsconfig/strictest"}),", since pnpm does not properly handle transitive dependencies. (You also must also install ",(0,s.jsx)(n.code,{children:"@tsconfig/node-lts"})," if you are using the Node.js config.)"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"First, extend from the base config. Second, you can optionally extend from either the Node.js config or the browser config. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:'// The configuration file for TypeScript.\n{\n  "$schema": "https://raw.githubusercontent.com/complete-ts/complete/main/packages/complete-tsconfig/schemas/tsconfig-strict-schema.json",\n\n  "extends": [\n    // https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.base.json\n    "complete-tsconfig/tsconfig.base.json",\n\n    // https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.node.json\n    "complete-tsconfig/tsconfig.node.json",\n  ],\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the ",(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/complete-tsconfig/tsconfig.base.json",children:"base config"})," handily specifies an ",(0,s.jsx)(n.code,{children:"include"})," of ",(0,s.jsx)(n.code,{children:'["./src/**/*.ts", "./src/**/*.tsx"]'})," and an ",(0,s.jsx)(n.code,{children:"outDir"})," of ",(0,s.jsx)(n.code,{children:'"./dist"'}),", so you can omit those options to keep your config file small and clean."]}),"\n",(0,s.jsx)(n.h2,{id:"strict-schema",children:"Strict Schema"}),"\n",(0,s.jsxs)(n.p,{children:["By default, VSCode will automatically recognize TypeScript config files and apply a schema. However, this schema allows for additional properties in order to prevent throwing errors for tools/frameworks like ",(0,s.jsx)(n.a,{href:"https://angular.dev/",children:"Angular"})," that add ",(0,s.jsx)(n.a,{href:"https://angular.dev/reference/configs/angular-compiler-options",children:"custom fields"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"However, the problem with this is that you might accidentally misspell a property (or e.g. accidentally add a compiler option to the root object). In these cases, you will not get a red squiggly line in your editor, making for a frustrating troubleshooting experience."}),"\n",(0,s.jsx)(n.p,{children:"In order to fix this, you should use the strict schema in all of your TypeScript configuration files like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:'{\n  "$schema": "https://raw.githubusercontent.com/complete-ts/complete/main/packages/complete-tsconfig/schemas/tsconfig-strict-schema.json",\n\n  // Other configuration goes here.\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(4041);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);