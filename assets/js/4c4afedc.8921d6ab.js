"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1705],{438:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(1085),a=n(1184);const i={},r="require-capital-const-assertions",l={id:"eslint-plugin-complete/rules/require-capital-const-assertions",title:"require-capital-const-assertions",description:"Requires a capital letter for named objects and arrays that have a const assertion.",source:"@site/docs/eslint-plugin-complete/rules/require-capital-const-assertions.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/require-capital-const-assertions",permalink:"/eslint-plugin-complete/rules/require-capital-const-assertions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"require-break",permalink:"/eslint-plugin-complete/rules/require-break"},next:{title:"require-capital-read-only",permalink:"/eslint-plugin-complete/rules/require-capital-read-only"}},o={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function u(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"require-capital-const-assertions",children:(0,t.jsx)(s.code,{children:"require-capital-const-assertions"})})}),"\n",(0,t.jsxs)(s.p,{children:["Requires a capital letter for named objects and arrays that have a ",(0,t.jsx)(s.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions",children:"const assertion"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,t.jsx)(s.p,{children:"In TypeScript:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Variables are usually typed with ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Camel_case",children:"camelCase"})," names."]}),"\n",(0,t.jsxs)(s.li,{children:["Types, interfaces, enums, and classes are usually typed with ",(0,t.jsx)(s.a,{href:"https://techterms.com/definition/pascalcase",children:"PascalCase"})," names."]}),"\n",(0,t.jsxs)(s.li,{children:["Static constants are usually typed with ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Snake_case",children:"SCREAMING_SNAKE_CASE"})," names."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Thus, when a variable is typed with a capital letter, it is heavily implied that it is acting as an enum, some other type-like value, or a read-only constant."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"enum"})," construct that is built-in to TypeScript makes things immutable by default. However, not everyone uses the built-in enums for various reasons. And in some cases, like when the enum values are the results of a function, you can't use the built-in enums at all. Thus, it is common to see plain objects representing enums in both JavaScript and TypeScript code."]}),"\n",(0,t.jsxs)(s.p,{children:["Since enums should never be modified, it almost always makes sense to use the ",(0,t.jsx)(s.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions",children:"const assertions"})," feature of TypeScript on objects that are representing an enum. Doing so will automatically make every property read-only without having to manually type it on every single field."]}),"\n",(0,t.jsx)(s.p,{children:"Similarly, the same logic applies to objects or arrays that are representing a static, read-only constant - they should also always have a const assertion."}),"\n",(0,t.jsx)(s.p,{children:"Use this rule to ensure read-only fields on all of the enums and constants throughout your codebase to keep things as safe as possible."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// Bad\n// (object acting as a number enum)\nconst Foo = {\n  Value1: 1,\n  Value2: 2,\n  Value3: 3,\n};\n\n// Good\n// (object acting as a number enum)\nconst Foo = {\n  Value1: 1,\n  Value2: 2,\n  Value3: 3,\n} as const;\n\n// Bad\n// (object acting as a static map)\nconst FOO = {\n  [MyEnum.Value1]: "something1",\n  [MyEnum.Value2]: "something2",\n  [MyEnum.Value3]: "something3",\n};\n\n// Good\n// (object acting as a static map)\nconst FOO = {\n  [MyEnum.Value1]: "something1",\n  [MyEnum.Value2]: "something2",\n  [MyEnum.Value3]: "something3",\n} as const;\n\n// Bad\n// (array acting as a static constant)\nconst FOO = [1, 2, 3];\n\n// Good\n// (array acting as a static constant)\nconst FOO = [1, 2, 3] as const;\n'})}),"\n",(0,t.jsx)(s.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/require-capital-const-assertions": "error"\n  }\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"This rule is not configurable."}),"\n",(0,t.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/require-capital-const-assertions.ts",children:"Rule source"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/require-capital-const-assertions.test.ts",children:"Test source"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1184:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(4041);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);