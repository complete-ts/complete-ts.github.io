"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6630],{6339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=t(1085),s=t(1184);const a={},l="no-mutable-return",i={id:"eslint-plugin-complete/rules/no-mutable-return",title:"no-mutable-return",description:"Disallows returning mutable arrays, maps, and sets from functions.",source:"@site/docs/eslint-plugin-complete/rules/no-mutable-return.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/no-mutable-return",permalink:"/eslint-plugin-complete/rules/no-mutable-return",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"no-let-any",permalink:"/eslint-plugin-complete/rules/no-let-any"},next:{title:"no-number-enums",permalink:"/eslint-plugin-complete/rules/no-number-enums"}},o={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"no-mutable-return",children:(0,r.jsx)(n.code,{children:"no-mutable-return"})})}),"\n",(0,r.jsx)(n.p,{children:"Disallows returning mutable arrays, maps, and sets from functions."}),"\n",(0,r.jsxs)(n.p,{children:["Arrays, maps, and sets are mutable by default in TypeScript, unlike safer languages like Rust. In general, code is ",(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/441309/why-are-mutable-structs-evil",children:"much easier to reason about when data structures are immutable"}),". Thus, this lint rule helps ensure a stricter boundary between functions to make data flows easier to understand."]}),"\n",(0,r.jsx)(n.p,{children:"The consequence of working with read-only data structures is that if a function callee needs to mutate the resulting data structure, they should make a copy of it (with e.g. the spread operator if it is an array). This makes it explicit that they are creating a new, non-vanilla thing. This pattern has the downside of a performance penalty, but in most real-world applications that are not using huge data structures, this is a micro-penalty and cannot be measured."}),"\n",(0,r.jsx)(n.p,{children:'Of course, there are some cases where a function really does need to return a mutable data structure, like when an array is really big and the cost of copying it would be too great. In these cases, use the "eslint-ignore-next-line" directive.'}),"\n",(0,r.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Bad\nfunction getArray(): number[] {\n  return [];\n}\n\n// Good\nfunction getArray(): readonly number[] {\n  return [];\n}\n\n// Bad\nfunction getMap(): Map<string, string> {\n  return new Map();\n}\n\n// Good\nfunction getMap(): ReadonlyMap<string, string>[] {\n  return new Map();\n}\n\n// Bad\nfunction getSet(): Set<string> {\n  return new Set();\n}\n\n// Good\nfunction getSet(): ReadonlySet<string>[] {\n  return new Set();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/no-mutable-return": "error"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This rule is not configurable."}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/no-mutable-return.ts",children:"Rule source"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/no-mutable-return.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var r=t(4041);const s={},a=r.createContext(s);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);