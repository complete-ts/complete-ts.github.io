"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[832],{4435:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=n(1085),i=n(1184);const r={},l="prefer-postfix-plusplus",o={id:"eslint-plugin-complete/rules/prefer-postfix-plusplus",title:"prefer-postfix-plusplus",description:"Require i++ instead of ++i (and i-- instead of --i).",source:"@site/docs/eslint-plugin-complete/rules/prefer-postfix-plusplus.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/prefer-postfix-plusplus",permalink:"/eslint-plugin-complete/rules/prefer-postfix-plusplus",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"prefer-plusplus",permalink:"/eslint-plugin-complete/rules/prefer-plusplus"},next:{title:"prefer-readonly-parameter-types",permalink:"/eslint-plugin-complete/rules/prefer-readonly-parameter-types"}},c={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"prefer-postfix-plusplus",children:(0,t.jsx)(s.code,{children:"prefer-postfix-plusplus"})})}),"\n",(0,t.jsxs)(s.p,{children:["Require ",(0,t.jsx)(s.code,{children:"i++"})," instead of ",(0,t.jsx)(s.code,{children:"++i"})," (and ",(0,t.jsx)(s.code,{children:"i--"})," instead of ",(0,t.jsx)(s.code,{children:"--i"}),")."]}),"\n",(0,t.jsx)(s.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,t.jsxs)(s.p,{children:["Most of the time, the ",(0,t.jsx)(s.code,{children:"++"})," operator is used inside of a for loop, which is pretty easy to understand. In this simple case, switching ",(0,t.jsx)(s.code,{children:"i++"})," to ",(0,t.jsx)(s.code,{children:"++i"})," does not functionally change the program in any way. However, this is not always the case. In some situations, changing ",(0,t.jsx)(s.code,{children:"++i"})," to ",(0,t.jsx)(s.code,{children:"i++"})," ",(0,t.jsx)(s.em,{children:"does"})," result in functionally different code. In these cases, it is usually done specifically by the programmer to take take advantage of the prefix functionality."]}),"\n",(0,t.jsxs)(s.p,{children:["Sometimes, using prefix ",(0,t.jsx)(s.code,{children:"++"})," and ",(0,t.jsx)(s.code,{children:"--"})," is the most concise way to write code. But since this usage is so rare in JavaScript/TypeScript, other people reading the code can get confused. So, it can be a good idea to replace prefix operators with more standard code, which can make things a bit less arcane at the cost of a little verbosity."]}),"\n",(0,t.jsxs)(s.p,{children:["Thus, this rule is meant to be used with the ",(0,t.jsx)(s.a,{href:"/eslint-plugin-complete/rules/no-unsafe-plusplus",children:(0,t.jsx)(s.code,{children:"no-unsafe-plusplus"})})," ESLint rule, which ensures that code like in the previous example can be identified and removed. The remaining cases of ",(0,t.jsx)(s.code,{children:"++i"})," in your code-base can be safety converted to the more-standard ",(0,t.jsx)(s.code,{children:"i++"}),", which will make your code more uniform."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"// Bad\n++foo;\n--foo;\n\n// Good\nfoo++;\nfoo--;\n"})}),"\n",(0,t.jsx)(s.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/prefer-postfix-plusplus": "error"\n  }\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"This rule is not configurable."}),"\n",(0,t.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/prefer-postfix-plusplus.ts",children:"Rule source"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/prefer-postfix-plusplus.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},1184:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var t=n(4041);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);