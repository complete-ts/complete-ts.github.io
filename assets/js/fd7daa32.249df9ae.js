"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4969],{1734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(1085),r=t(1184);const s={},o="require-variadic-function-argument",a={id:"eslint-plugin-complete/rules/require-variadic-function-argument",title:"require-variadic-function-argument",description:"Requires that variadic functions must be supplied with at least one argument.",source:"@site/docs/eslint-plugin-complete/rules/require-variadic-function-argument.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/require-variadic-function-argument",permalink:"/eslint-plugin-complete/rules/require-variadic-function-argument",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"require-unannotated-const-assertions",permalink:"/eslint-plugin-complete/rules/require-unannotated-const-assertions"},next:{title:"strict-array-methods",permalink:"/eslint-plugin-complete/rules/strict-array-methods"}},c={},l=[{value:"Rule Details",id:"rule-details",level:2},{value:"Hard-Coded Exceptions",id:"hard-coded-exceptions",level:2},{value:"JSDoc Exceptions",id:"jsdoc-exceptions",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"require-variadic-function-argument",children:(0,i.jsx)(n.code,{children:"require-variadic-function-argument"})})}),"\n",(0,i.jsx)(n.p,{children:"Requires that variadic functions must be supplied with at least one argument."}),"\n",(0,i.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Variadic_function",children:"Variadic functions"})," are functions that take a variable amount of arguments. However, as far as the TypeScript compiler is concerned, passing no arguments at all to a variadic function is legal. But doing this is usually a bug. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const myArray = [1, 2, 3];\nmyArray.push(); // Oops!\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, the author of the code made a typo and forgot to supply the thing to be inserted into the array. Thus, the ",(0,i.jsx)(n.code,{children:"myArray.push"})," line is a no-op."]}),"\n",(0,i.jsx)(n.p,{children:"To protect against these kinds of errors, this rule requires that you always pass at least one argument to a variadic function."}),"\n",(0,i.jsx)(n.h2,{id:"hard-coded-exceptions",children:"Hard-Coded Exceptions"}),"\n",(0,i.jsxs)(n.p,{children:["This rule is hard-coded to not throw an error with ",(0,i.jsx)(n.code,{children:"console"})," methods (such as ",(0,i.jsx)(n.code,{children:"console.log"})," or ",(0,i.jsx)(n.code,{children:"console.error"}),"), since:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"It is relatively common to use these functions with no arguments in order to print a newline."}),"\n",(0,i.jsx)(n.li,{children:"The TypeScript signatures for those functions are weird in that they have a rest parameter as the second parameter instead of the first one."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, this rule will not be flagged for ",(0,i.jsx)(n.code,{children:"setTimeout"})," or ",(0,i.jsx)(n.code,{children:"setInterval"}),", since those rest parameters are optional."]}),"\n",(0,i.jsx)(n.h2,{id:"jsdoc-exceptions",children:"JSDoc Exceptions"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes, a variadic function can be written to intentionally allow for zero arguments. If this is the case, you can use a ",(0,i.jsx)(n.code,{children:"@allowEmptyVariadic"})," JSDoc tag inside of the JSDoc comment for the function. Then, this rule will ignore any calls of that function."]}),"\n",(0,i.jsx)(n.p,{children:"For example, something like the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/**\n * Helper function to get all of the cars in the database. By default, it will return every car.\n *\n * You can optionally specify one or more car types to return only the cars that match the specified\n * car types.\n *\n * @allowEmptyVariadic\n */\nfunction getCars(...carTypes: CarType[]) {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/require-variadic-function-argument": "error"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This rule is not configurable."}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/require-variadic-function-argument.ts",children:"Rule source"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/require-variadic-function-argument.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(4041);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);