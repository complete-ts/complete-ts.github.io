"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2161],{7911:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(1085),s=r(1184);const l={},o="prefer-readonly-parameter-types",i={id:"eslint-plugin-complete/rules/prefer-readonly-parameter-types",title:"prefer-readonly-parameter-types",description:"Require function parameters to be typed as readonly to prevent accidental mutation of inputs.",source:"@site/docs/eslint-plugin-complete/rules/prefer-readonly-parameter-types.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/prefer-readonly-parameter-types",permalink:"/eslint-plugin-complete/rules/prefer-readonly-parameter-types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"prefer-postfix-plusplus",permalink:"/eslint-plugin-complete/rules/prefer-postfix-plusplus"},next:{title:"require-break",permalink:"/eslint-plugin-complete/rules/require-break"}},a={},p=[{value:"Resources",id:"resources",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"prefer-readonly-parameter-types",children:(0,n.jsx)(t.code,{children:"prefer-readonly-parameter-types"})})}),"\n",(0,n.jsxs)(t.p,{children:["Require function parameters to be typed as ",(0,n.jsx)(t.code,{children:"readonly"})," to prevent accidental mutation of inputs."]}),"\n",(0,n.jsxs)(t.p,{children:["This is the same thing as the ",(0,n.jsx)(t.a,{href:"https://typescript-eslint.io/rules/prefer-readonly-parameter-types/",children:(0,n.jsx)(t.code,{children:"@typescript-eslint/prefer-readonly-parameter-types"})})," rule, with the follow changes:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"allow"})," array is hard-coded to always contain ",(0,n.jsx)(t.code,{children:"ReadonlyMap"})," and ",(0,n.jsx)(t.code,{children:"ReadonlySet"}),"."]}),"\n",(0,n.jsx)(t.li,{children:'An additional option of "onlyRecordsArraysMapsSet" is added. This option will make the rule only examine a function parameter if it is a record, an array, a tuple, a map, or a set. (In other words, only "simple" types.) The option defaults to true. The motivation behind this option is that it reduces a ton of false positives, which still retaining the core value of the rule.'}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/prefer-readonly-parameter-types.ts",children:"Rule source"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/prefer-readonly-parameter-types.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1184:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(4041);const s={},l=n.createContext(s);function o(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);