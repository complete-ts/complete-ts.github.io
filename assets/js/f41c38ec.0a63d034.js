"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4484],{2978:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var r=s(1085),t=s(1184);const i={},d="functions/enums",c={id:"complete-common/functions/enums",title:"functions/enums",description:"Helper functions that have to do with TypeScript enums.",source:"@site/docs/complete-common/functions/enums.md",sourceDirName:"complete-common/functions",slug:"/complete-common/functions/enums",permalink:"/complete-common/functions/enums",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"functions/assert",permalink:"/complete-common/functions/assert"},next:{title:"functions/map",permalink:"/complete-common/functions/map"}},l={},h=[{value:"Functions",id:"functions",level:2},{value:"getEnumEntries()",id:"getenumentries",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getEnumKeys()",id:"getenumkeys",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getEnumValues()",id:"getenumvalues",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"interfaceSatisfiesEnum()",id:"interfacesatisfiesenum",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"isEnumValue()",id:"isenumvalue",level:3},{value:"Type Parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"functionsenums",children:"functions/enums"})}),"\n",(0,r.jsx)(n.p,{children:"Helper functions that have to do with TypeScript enums."}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"getenumentries",children:"getEnumEntries()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getEnumEntries<T>(transpiledEnum): ReadonlyArray<[string, T[keyof T]]>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper function to get the entries of an enum."}),"\n",(0,r.jsx)(n.p,{children:"(By default, TypeScript will put the keys inside of the values of a number-based enum, so those\nhave to be filtered out.)"}),"\n",(0,r.jsx)(n.p,{children:"This function will work properly for both number and string enums."}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters",children:"Type Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.th,{children:"Type Parameter"})})}),(0,r.jsx)(n.tbody,{children:(0,r.jsx)(n.tr,{children:(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"TranspiledEnum"})]})})})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transpiledEnum"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ReadonlyArray"}),"<[",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"T"}),"[keyof ",(0,r.jsx)(n.code,{children:"T"}),"]]>"]}),"\n",(0,r.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/e4c07d57386e06c666c5f47f1c78d667b6ec4f62/packages/complete-common/src/functions/enums.ts#L17",children:"functions/enums.ts:17"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"getenumkeys",children:"getEnumKeys()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getEnumKeys(transpiledEnum): readonly string[]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper function to get the keys of an enum."}),"\n",(0,r.jsx)(n.p,{children:"(By default, TypeScript will put the keys inside of the values of a number-based enum, so those\nhave to be filtered out.)"}),"\n",(0,r.jsx)(n.p,{children:"This function will work properly for both number and string enums."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transpiledEnum"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TranspiledEnum"})})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["readonly ",(0,r.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,r.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/e4c07d57386e06c666c5f47f1c78d667b6ec4f62/packages/complete-common/src/functions/enums.ts#L38",children:"functions/enums.ts:38"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"getenumvalues",children:"getEnumValues()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getEnumValues<T>(transpiledEnum): ReadonlyArray<T[keyof T]>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper function to get the only the values of an enum."}),"\n",(0,r.jsx)(n.p,{children:"(By default, TypeScript will put the keys inside of the values of a number-based enum, so those\nhave to be filtered out.)"}),"\n",(0,r.jsx)(n.p,{children:"This function will work properly for both number and string enums."}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.th,{children:"Type Parameter"})})}),(0,r.jsx)(n.tbody,{children:(0,r.jsx)(n.tr,{children:(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"TranspiledEnum"})]})})})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transpiledEnum"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,r.jsx)(n.code,{children:"T"}),"[keyof ",(0,r.jsx)(n.code,{children:"T"}),"]>"]}),"\n",(0,r.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/e4c07d57386e06c666c5f47f1c78d667b6ec4f62/packages/complete-common/src/functions/enums.ts#L51",children:"functions/enums.ts:51"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"interfacesatisfiesenum",children:"interfaceSatisfiesEnum()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function interfaceSatisfiesEnum<T, Enum>(): void\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper function to validate that an interface contains all of the keys of an enum. You must\nspecify both generic parameters in order for this to work properly (i.e. the interface and then\nthe enum)."}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum MyEnum {\n  Value1,\n  Value2,\n  Value3,\n}\n\ninterface MyEnumToType {\n  [MyEnum.Value1]: boolean;\n  [MyEnum.Value2]: number;\n  [MyEnum.Value3]: string;\n}\n\ninterfaceSatisfiesEnum<MyEnumToType, MyEnum>();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This function is only meant to be used with interfaces (i.e. types that will not exist at\nrun-time). If you are generating an object that will contain all of the keys of an enum, use the\n",(0,r.jsx)(n.code,{children:"satisfies"})," operator with the ",(0,r.jsx)(n.code,{children:"Record"})," type instead."]}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.th,{children:"Type Parameter"})})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsx)(n.tr,{children:(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"Enum"}),", ",(0,r.jsx)(n.code,{children:"unknown"}),">"]})}),(0,r.jsx)(n.tr,{children:(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Enum"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"string"})," | ",(0,r.jsx)(n.code,{children:"number"})]})})]})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/e4c07d57386e06c666c5f47f1c78d667b6ec4f62/packages/complete-common/src/functions/enums.ts#L85",children:"functions/enums.ts:85"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"isenumvalue",children:"isEnumValue()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function isEnumValue<T>(\n   value, \n   transpiledEnum, \n   set?): value is T[keyof T]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper function to validate that a particular value exists inside of an enum."}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-3",children:"Type Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.th,{children:"Type Parameter"})})}),(0,r.jsx)(n.tbody,{children:(0,r.jsx)(n.tr,{children:(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"TranspiledEnum"})]})})})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"value"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"string"})," | ",(0,r.jsx)(n.code,{children:"number"})]}),(0,r.jsx)(n.td,{children:"The value to check."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transpiledEnum"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),(0,r.jsx)(n.td,{children:"The enum to check against."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"set"}),"?"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"ReadonlySet"}),"<",(0,r.jsx)(n.code,{children:"string"})," | ",(0,r.jsx)(n.code,{children:"number"}),">"]}),(0,r.jsx)(n.td,{children:"Optional. A set that contains all of the values of an enum. If provided, this function will check for existence using the set (instead of the enum itself). Using a set should be more performant for enums with around 52 or more elements."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"value is T[keyof T]"})}),"\n",(0,r.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/e4c07d57386e06c666c5f47f1c78d667b6ec4f62/packages/complete-common/src/functions/enums.ts#L100",children:"functions/enums.ts:100"})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1184:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var r=s(4041);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);