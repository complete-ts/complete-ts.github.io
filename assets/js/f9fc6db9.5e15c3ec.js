"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9888],{532:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var n=s(1085),r=s(1184);const l={},i="prefer-const",o={id:"eslint-plugin-complete/rules/prefer-const",title:"prefer-const",description:"Requires const declarations for variables that are never reassigned after declared.",source:"@site/docs/eslint-plugin-complete/rules/prefer-const.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/prefer-const",permalink:"/eslint-plugin-complete/rules/prefer-const",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"no-void-return-type",permalink:"/eslint-plugin-complete/rules/no-void-return-type"},next:{title:"prefer-plusplus",permalink:"/eslint-plugin-complete/rules/prefer-plusplus"}},c={},a=[{value:"Rule Details",id:"rule-details",level:2},{value:"Gotchas",id:"gotchas",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"prefer-const",children:(0,n.jsx)(t.code,{children:"prefer-const"})})}),"\n",(0,n.jsxs)(t.p,{children:["Requires ",(0,n.jsx)(t.code,{children:"const"})," declarations for variables that are never reassigned after declared."]}),"\n",(0,n.jsxs)(t.p,{children:["This is the exact same thing as the ESLint ",(0,n.jsx)(t.a,{href:"https://eslint.org/docs/latest/rules/prefer-const",children:(0,n.jsx)(t.code,{children:"prefer-const"})})," rule, except the auto-fixer is disabled."]}),"\n",(0,n.jsx)(t.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,n.jsxs)(t.p,{children:["This version of the rule without an auto-fixer is useful because it is common during development to comment out code that modifies a ",(0,n.jsx)(t.code,{children:"let"})," variable. In these cases, the auto-fixer is harmful, since it would require us to manually go change the ",(0,n.jsx)(t.code,{children:"const"})," back to a ",(0,n.jsx)(t.code,{children:"let"})," after uncommenting the code to put it back the way it way."]}),"\n",(0,n.jsx)(t.h2,{id:"gotchas",children:"Gotchas"}),"\n",(0,n.jsx)(t.p,{children:"If you use this rule, make sure to turn off the vanilla ESLint rule, like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "rules": {\n    "prefer-const": "off"\n  }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Otherwise, the two rules will conflict with each other."}),"\n",(0,n.jsxs)(t.p,{children:["Note that if you use the ",(0,n.jsx)(t.code,{children:"recommended"})," config that comes with this plugin, then the vanilla ESLint rule will be turned off automatically."]}),"\n",(0,n.jsx)(t.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/prefer-const": "error"\n  }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"This rule is not configurable. (All of the unsafe options from the original have been removed.)"}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/prefer-const.ts",children:"Rule source"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/prefer-const.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},1184:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(4041);const r={},l=n.createContext(r);function i(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);