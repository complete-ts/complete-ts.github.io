"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9650],{9559:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=s(1085),r=s(1184);const i={},a="require-break",o={id:"eslint-plugin-complete/rules/require-break",title:"require-break",description:"Requires that each non-fallthrough case of a switch statement has a break statement.",source:"@site/docs/eslint-plugin-complete/rules/require-break.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/require-break",permalink:"/eslint-plugin-complete/rules/require-break",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"prefer-readonly-parameter-types",permalink:"/eslint-plugin-complete/rules/prefer-readonly-parameter-types"},next:{title:"require-capital-const-assertions",permalink:"/eslint-plugin-complete/rules/require-capital-const-assertions"}},l={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"require-break",children:(0,n.jsx)(t.code,{children:"require-break"})})}),"\n",(0,n.jsxs)(t.p,{children:["Requires that each non-fallthrough case of a switch statement has a ",(0,n.jsx)(t.code,{children:"break"})," statement."]}),"\n",(0,n.jsx)(t.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://eslint.org/docs/latest/rules/no-fallthrough",children:(0,n.jsx)(t.code,{children:"no-fallthrough"})}),' core ESLint rule helps to ensure that switch statements do not accidentally "fall through", which is a common mistake. It does this by ensuring that you put a break statement (or a ',(0,n.jsx)(t.code,{children:"return"}),"/",(0,n.jsx)(t.code,{children:"throw"}),") in every non-empty switch case."]}),"\n",(0,n.jsxs)(t.p,{children:["However, it does not enforce a ",(0,n.jsx)(t.code,{children:"break"})," statement on the final case. This makes sense, because there is nothing that the final case could ever fallthrough to. With that said, it can still be desirable to enforce a ",(0,n.jsx)(t.code,{children:"break"})," statement for the final case. Doing this makes switch arms look more consistent, makes switch arms more resilient to reorganization, and reduces Git noise when a new switch case is added at the bottom. (This is similar to the benefits provided by trailing commas.)"]}),"\n",(0,n.jsxs)(t.p,{children:["This rule enforces ",(0,n.jsx)(t.code,{children:"break"})," statements on the final case."]}),"\n",(0,n.jsxs)(t.p,{children:["Note that this rule will still apply even if the final case is a ",(0,n.jsx)(t.code,{children:"default"})," case, and this is intentional. Assuming that ",(0,n.jsx)(t.code,{children:"default"})," cases are always at the bottom of a switch statement (using the ",(0,n.jsx)(t.a,{href:"https://eslint.org/docs/latest/rules/default-case-last",children:(0,n.jsx)(t.code,{children:"default-case-last"})})," rule), ",(0,n.jsx)(t.code,{children:"default"})," cases are distinct from other case statements in that they would not ever need to be reorganized or have something added underneath. So, the reasons for wanting a ",(0,n.jsx)(t.code,{children:"break"})," statement in a ",(0,n.jsx)(t.code,{children:"default"}),' case are less intuitive. First, having "empty" ',(0,n.jsx)(t.code,{children:"default"})," cases are sometimes required in order to satisfy the ",(0,n.jsx)(t.a,{href:"https://typescript-eslint.io/rules/switch-exhaustiveness-check/",children:(0,n.jsx)(t.code,{children:"@typescript-eslint/switch-exhaustiveness-check"})})," rule (e.g. when you only want to define behavior for 2 out of 10 enum members). In these cases, a ",(0,n.jsx)(t.code,{children:"break"})," statement is useful to order to avoid triggering the ",(0,n.jsx)(t.a,{href:"https://eslint.org/docs/rules/no-empty",children:(0,n.jsx)(t.code,{children:"no-empty"})})," rule and to avoid the appearance of the arm being unfinished. Thus, since ",(0,n.jsx)(t.code,{children:"break"})," statements might be desired for otherwise-empty ",(0,n.jsx)(t.code,{children:"default"})," cases, it can make sense to enforce them in every ",(0,n.jsx)(t.code,{children:"default"})," case across a codebase for consistency."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"// Bad\nswitch (foo) {\n  case 1: {\n    doSomething1();\n    break;\n  }\n\n  case 2: {\n    doSomething2();\n  }\n}\n\n// Good\nswitch (foo) {\n  case 1: {\n    doSomething1();\n    break;\n  }\n\n  case 2: {\n    doSomething2();\n    break;\n  }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/require-break": "error"\n  }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"This rule is not configurable."}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/require-break.ts",children:"Rule source"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/require-break.test.ts",children:"Test source"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1184:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(4041);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);