"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5104],{8376:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(1085),r=t(1184);const i={},a="require-capital-read-only",l={id:"eslint-plugin-complete/rules/require-capital-read-only",title:"require-capital-read-only",description:"Requires maps/sets/arrays with a capital letter to be read-only.",source:"@site/docs/eslint-plugin-complete/rules/require-capital-read-only.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/require-capital-read-only",permalink:"/eslint-plugin-complete/rules/require-capital-read-only",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"require-capital-const-assertions",permalink:"/eslint-plugin-complete/rules/require-capital-const-assertions"},next:{title:"require-unannotated-const-assertions",permalink:"/eslint-plugin-complete/rules/require-unannotated-const-assertions"}},o={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"require-capital-read-only",children:(0,s.jsx)(n.code,{children:"require-capital-read-only"})})}),"\n",(0,s.jsx)(n.p,{children:"Requires maps/sets/arrays with a capital letter to be read-only."}),"\n",(0,s.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,s.jsx)(n.p,{children:"In TypeScript:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variables are usually typed with ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Camel_case",children:"camelCase"})," names."]}),"\n",(0,s.jsxs)(n.li,{children:["Static constants are usually typed with ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Snake_case",children:"SCREAMING_SNAKE_CASE"})," names."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Thus, when a map, set, array, or object is typed with a capital letter, it is heavily implied that it is acting as a static constant. Since maps, sets, and arrays are writable by default, it is common to explicitly type these kinds of constants with ",(0,s.jsx)(n.code,{children:"ReadonlyMap<Foo, Bar>"})," or ",(0,s.jsx)(n.code,{children:"ReadonlySet<Foo>"})," or ",(0,s.jsx)(n.code,{children:"readonly Foo[]"})," or ",(0,s.jsx)(n.code,{children:"Readonly<Foo>"})," to enforce that they can never be modified later on, which prevents bugs. However, it can be difficult to remember to do this every single time."]}),"\n",(0,s.jsx)(n.p,{children:"Use this rule to ensure that the SCREAMING_SNAKE_CASE variables are read-only throughout your codebase to keep things as safe as possible."}),"\n",(0,s.jsxs)(n.p,{children:["Also see the ",(0,s.jsxs)(n.a,{href:"/eslint-plugin-complete/rules/require-capital-const-assertions",children:[(0,s.jsx)(n.code,{children:"require-capital-const-assertions"})," rule"]}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Bad\nconst MY_MAP = new Map([\n  [1, 2],\n  [3, 4],\n  [5, 6],\n]);\n\n// Good\nconst MY_MAP: ReadonlyMap<number, number> = new Map([\n  [1, 2],\n  [3, 4],\n  [5, 6],\n]);\n\n// Bad\nconst MY_SET = new Set([1, 2, 3]);\n\n// Good\nconst MY_SET: ReadonlySet<number> = new Set([1, 2, 3]);\n\n// Bad\nconst MY_ARRAY = [1, 2, 3];\n\n// Good\nconst MY_ARRAY: readonly number[] = [1, 2, 3];\n\n// Bad\nconst MY_OBJECT = {\n  foo: 123,\n  bar: 456,\n};\n\n// Good\ninterface Foo {\n  foo: number;\n  bar: number;\n}\nconst MY_OBJECT: Readonly<Foo> = {\n  foo: 123,\n  bar: 456,\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/require-capital-read-only": "error"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This rule is not configurable."}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/require-capital-read-only.ts",children:"Rule source"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/require-capital-read-only.test.ts",children:"Test source"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(4041);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);