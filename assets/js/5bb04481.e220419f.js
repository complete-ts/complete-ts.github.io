"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8789],{4643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});var s=n(1085),o=n(1184);const l={},c="no-object-methods-with-map-set",i={id:"eslint-plugin-complete/rules/no-object-methods-with-map-set",title:"no-object-methods-with-map-set",description:"Disallows using the Object.entries, Object.keys, and Object.values methods with maps and sets, since doing this is virtually always a bug.",source:"@site/docs/eslint-plugin-complete/rules/no-object-methods-with-map-set.md",sourceDirName:"eslint-plugin-complete/rules",slug:"/eslint-plugin-complete/rules/no-object-methods-with-map-set",permalink:"/eslint-plugin-complete/rules/no-object-methods-with-map-set",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"no-object-any",permalink:"/eslint-plugin-complete/rules/no-object-any"},next:{title:"no-string-length-0",permalink:"/eslint-plugin-complete/rules/no-string-length-0"}},r={},a=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options and Defaults",id:"options-and-defaults",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"no-object-methods-with-map-set",children:(0,s.jsx)(t.code,{children:"no-object-methods-with-map-set"})})}),"\n",(0,s.jsxs)(t.p,{children:["Disallows using the ",(0,s.jsx)(t.code,{children:"Object.entries"}),", ",(0,s.jsx)(t.code,{children:"Object.keys"}),", and ",(0,s.jsx)(t.code,{children:"Object.values"})," methods with maps and sets, since doing this is virtually always a bug."]}),"\n",(0,s.jsx)(t.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,s.jsx)(t.p,{children:"In order to iterate over a JavaScript object, you might have some code like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"for (const [key, value] of Object.entries(foo)) {\n  // Do something.\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["However, it is common to refactor objects to ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:"maps"}),", since they are ",(0,s.jsx)(t.a,{href:"https://claritydev.net/blog/simplifying-code-with-maps-in-javascript/",children:"more performant and provide a nicer API"}),". After such a refactor, the above code block would still pass the TypeScript compiler, but would not work at all."]}),"\n",(0,s.jsxs)(t.p,{children:["This rule prevents the use of specific ",(0,s.jsx)(t.code,{children:"Object"})," methods with maps and sets."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"declare const myMap: Map<string, string>;\n\n// Bad\nfor (const [key, value] of Object.entries(myMap)) {\n}\nfor (const key of Object.keys(myMap)) {\n}\nfor (const value of Object.values(myMap)) {\n}\n\n// Good\nfor (const [key, value] of myMap.entries()) {\n}\nfor (const key of myMap.keys()) {\n}\nfor (const value of myMap.values()) {\n}\n\ndeclare const mySet: Set<string>;\n\n// Bad\nfor (const entry of Object.entries(mySet)) {\n}\nfor (const key of Object.keys(mySet)) {\n}\nfor (const value of Object.values(mySet)) {\n}\n\n// Good\nfor (const entry of mySet.entries()) {\n}\nfor (const key of mySet.keys()) {\n}\nfor (const value of mySet.values()) {\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"options-and-defaults",children:"Options and Defaults"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "rules": {\n    "complete/no-object-methods-with-map-set": "error"\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"This rule is not configurable."}),"\n",(0,s.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../..",children:"How to use this rule"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/src/rules/no-object-methods-with-map-set.ts",children:"Rule source"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/complete-ts/complete/blob/main/packages/eslint-plugin-complete/tests/rules/no-object-methods-with-map-set.test.ts",children:"Test source"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1184:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(4041);const o={},l=s.createContext(o);function c(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);